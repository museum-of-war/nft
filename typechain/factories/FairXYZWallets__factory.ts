/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";

import type { FairXYZWallets } from "../FairXYZWallets";

export class FairXYZWallets__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    address_for_signer: string,
    address_for_withdraw: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<FairXYZWallets> {
    return super.deploy(
      address_for_signer,
      address_for_withdraw,
      overrides || {}
    ) as Promise<FairXYZWallets>;
  }
  getDeployTransaction(
    address_for_signer: string,
    address_for_withdraw: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      address_for_signer,
      address_for_withdraw,
      overrides || {}
    );
  }
  attach(address: string): FairXYZWallets {
    return super.attach(address) as FairXYZWallets;
  }
  connect(signer: Signer): FairXYZWallets__factory {
    return super.connect(signer) as FairXYZWallets__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FairXYZWallets {
    return new Contract(address, _abi, signerOrProvider) as FairXYZWallets;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "address_for_signer",
        type: "address",
      },
      {
        internalType: "address",
        name: "address_for_withdraw",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "new_address",
        type: "address",
      },
    ],
    name: "change_signer",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "new_address",
        type: "address",
      },
    ],
    name: "change_withdraw",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "view_signer",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "view_withdraw",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610a51380380610a51833981810160405281019061003291906101b8565b61004e6100436100d760201b60201c565b6100df60201b60201c565b81600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050610246565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000815190506101b28161022f565b92915050565b600080604083850312156101cf576101ce61022a565b5b60006101dd858286016101a3565b92505060206101ee858286016101a3565b9150509250929050565b60006102038261020a565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b610238816101f8565b811461024357600080fd5b50565b6107fc806102556000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80638a8e81121161005b5780638a8e8112146100da5780638da5cb5b146100f85780639797dfad14610116578063f2fde38b146101465761007d565b80633b658699146100825780636f9155b1146100a0578063715018a6146100d0575b600080fd5b61008a610162565b6040516100979190610694565b60405180910390f35b6100ba60048036038101906100b59190610612565b61018c565b6040516100c79190610694565b60405180910390f35b6100d8610275565b005b6100e26102fd565b6040516100ef9190610694565b60405180910390f35b610100610327565b60405161010d9190610694565b60405180910390f35b610130600480360381019061012b9190610612565b610350565b60405161013d9190610694565b60405180910390f35b610160600480360381019061015b9190610612565b610439565b005b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000610196610531565b73ffffffffffffffffffffffffffffffffffffffff166101b4610327565b73ffffffffffffffffffffffffffffffffffffffff161461020a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610201906106cf565b60405180910390fd5b81600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b61027d610531565b73ffffffffffffffffffffffffffffffffffffffff1661029b610327565b73ffffffffffffffffffffffffffffffffffffffff16146102f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102e8906106cf565b60405180910390fd5b6102fb6000610539565b565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600061035a610531565b73ffffffffffffffffffffffffffffffffffffffff16610378610327565b73ffffffffffffffffffffffffffffffffffffffff16146103ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c5906106cf565b60405180910390fd5b81600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b610441610531565b73ffffffffffffffffffffffffffffffffffffffff1661045f610327565b73ffffffffffffffffffffffffffffffffffffffff16146104b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ac906106cf565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610525576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051c906106af565b60405180910390fd5b61052e81610539565b50565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008135905061060c816107af565b92915050565b60006020828403121561062857610627610732565b5b6000610636848285016105fd565b91505092915050565b61064881610700565b82525050565b600061065b6026836106ef565b915061066682610737565b604082019050919050565b600061067e6020836106ef565b915061068982610786565b602082019050919050565b60006020820190506106a9600083018461063f565b92915050565b600060208201905081810360008301526106c88161064e565b9050919050565b600060208201905081810360008301526106e881610671565b9050919050565b600082825260208201905092915050565b600061070b82610712565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6107b881610700565b81146107c357600080fd5b5056fea2646970667358221220f0b187e15da4e5bbb37cbbb679697bc36cfd0c71dc166c2551ef2d3f6623335864736f6c63430008070033";
